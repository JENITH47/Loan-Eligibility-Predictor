import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve

# Load data
data = pd.read_csv('/content/loan-test-with-age-and-status.csv') #use the given dataset

# Preprocessing
data['Credit_History'] = data['Credit_History'].fillna(0)
data = data.dropna(subset=['LoanAmount'])
data['Gender'] = data['Gender'].fillna('Male')
data['Self_Employed'] = data['Self_Employed'].fillna('No')
data = data.dropna(subset=['Loan_Amount_Term'])

data['Gender'] = data['Gender'].map({'Male': 1, 'Female': 0}).astype(int)
data['Self_Employed'] = data['Self_Employed'].map({'Yes': 1, 'No': 0}).astype(int)
data['Married'] = data['Married'].map({'Yes': 1, 'No': 0}).astype(int)
data['Education'] = data['Education'].map({'Graduate': 1, 'Not Graduate': 0}).astype(int)

# Map Dependents field (with 3+)
data['Dependents'] = data['Dependents'].replace('3+', 3).astype(float)
data['Property_Area'] = data['Property_Area'].map({'Urban': 2, 'Semiurban': 1, 'Rural': 0})

# Target Encoding
data['Loan_Status'] = data['Loan_Status'].map({'Y': 1, 'N': 0}).astype(int)

# Features and Target
X = data[['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'ApplicantIncome',
          'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Property_Area']]
y = data['Loan_Status']

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression
model = LogisticRegression()
model.fit(X_train, y_train)
predictions = model.predict(X_test)

# Evaluation
acc = accuracy_score(y_test, predictions)
print(f"Accuracy: {acc}")
print("Confusion Matrix:\n", confusion_matrix(y_test, predictions))

# ROC Curve (Optional)
fpr, tpr, _ = roc_curve(y_test, model.predict_proba(X_test)[:,1])
plt.plot(fpr, tpr)
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.grid()
plt.show()
